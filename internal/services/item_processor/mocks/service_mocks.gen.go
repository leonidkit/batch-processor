// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package itemprocessor_mocks is a generated GoMock package.
package itemprocessor_mocks

import (
	context "context"
	itemprocessor "onmi/internal/clients/item_processor"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockitemProcessorClient is a mock of itemProcessorClient interface.
type MockitemProcessorClient struct {
	ctrl     *gomock.Controller
	recorder *MockitemProcessorClientMockRecorder
}

// MockitemProcessorClientMockRecorder is the mock recorder for MockitemProcessorClient.
type MockitemProcessorClientMockRecorder struct {
	mock *MockitemProcessorClient
}

// NewMockitemProcessorClient creates a new mock instance.
func NewMockitemProcessorClient(ctrl *gomock.Controller) *MockitemProcessorClient {
	mock := &MockitemProcessorClient{ctrl: ctrl}
	mock.recorder = &MockitemProcessorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockitemProcessorClient) EXPECT() *MockitemProcessorClientMockRecorder {
	return m.recorder
}

// GetLimits mocks base method.
func (m *MockitemProcessorClient) GetLimits() (uint64, time.Duration) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimits")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(time.Duration)
	return ret0, ret1
}

// GetLimits indicates an expected call of GetLimits.
func (mr *MockitemProcessorClientMockRecorder) GetLimits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimits", reflect.TypeOf((*MockitemProcessorClient)(nil).GetLimits))
}

// Process mocks base method.
func (m *MockitemProcessorClient) Process(ctx context.Context, batch itemprocessor.Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockitemProcessorClientMockRecorder) Process(ctx, batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockitemProcessorClient)(nil).Process), ctx, batch)
}
